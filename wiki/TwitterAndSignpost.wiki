#summary Real-life example of how to use Signpost with Twitter
#labels twitter,Featured,example

= Using Signpost with Twitter =
If you want to access Twitter's service API from your Java application, or if you are writing a Twitter API facade in Java and don't want to bother about the nitty gritty details of OAuth, then you have come to the right place: Signpost works flawlessly in conjunction with Twitter's server-side OAuth implementation.

= Example Code =
{{{
import java.io.BufferedReader;
import java.io.InputStreamReader;

import oauth.signpost.OAuthConsumer;
import oauth.signpost.OAuthProvider;
import oauth.signpost.impl.DefaultOAuthConsumer;
import oauth.signpost.impl.DefaultOAuthProvider;
import oauth.signpost.signature.SignatureMethod;

public class Main {

    public static void main(String[] args) throws Exception {

        OAuthConsumer consumer = new DefaultOAuthConsumer(
                // the consumer key of this test app
                // (replace this key with yours if you copy n paste this code)
                "iIlNngv1KdV6XzNYkoLA",
                // the consumer secret of this app
                // (replace this secret with yours if you copy n paste this code)
                "exQ94pBpLXFcyttvLoxU2nrktThrlsj580zjYzmoM",
                SignatureMethod.HMAC_SHA1);

        OAuthProvider provider = new DefaultOAuthProvider(consumer,
                "http://twitter.com/oauth/request_token",
                "http://twitter.com/oauth/access_token",
                "http://twitter.com/oauth/authorize");

        System.out.println("Fetching request token from Twitter...");

        // we do not support callbacks, thus pass null
        String authUrl = provider.retrieveRequestToken(null);

        System.out.println("Request token: " + consumer.getToken());
        System.out.println("Token secret: " + consumer.getTokenSecret());

        System.out.println("Now visit " + authUrl
                + " and grant this app authorization");
        System.out.println("Click ENTER when you're done");

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        br.readLine();

        System.out.println("Fetching access token from Twitter...");

        provider.retrieveAccessToken();

        System.out.println("Access token: " + consumer.getToken());
        System.out.println("Token secret: " + consumer.getTokenSecret());
    }
}
}}}

Here is what you typically do step by step:

  # When your users want to access Twitter through your application for the first time, you should display some kind of notification which indicates that an authentication process is about to start
  # Call OAuthProvider.retrieveRequestToken() on the OAuthProvider
  # On method return, you have to send the user to the URL returned by it. The user now must grant your application access to Twitter - this step is out of the reach of your application, because it happens in the Web browser. However, if your application can receive callbacks via URLs, you can be informed about successful authorization by providing a callback URL to retrieveRequestToken().
  # Call OAuthProvider.retrieveAccessToken()
  # On method return, call OAuthConsumer.getToken() and OAuthConsumer.getTokenSecret(), associate them with the user who triggered the authorization procedure, and store them away safely.
  # Any OAuthConsumer configured with these values can now sign HTTP requests in order to access protected resources on Twitter on behalf of that user.